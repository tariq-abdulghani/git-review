# Git Basics

## Git Terminology
    Working Tree -> Set of files and directories managed by git
    Repository   -> all meta data about the whole changes .
    Commit       -> saved changes at a point of time
    Branch       -> Sequence of commits, and also contains all information about directory
                    and files.

    
## Git Basic Work Flow
    working tree            staging area            Repository
        | <-------------------Checkout----------------------|
        | -----------add--------->|                         |
        |                         |-----------Commit------->|
    
-- Conclusions
    we need to create a repository to save our hisoty

# basic commands
git init 
git status // gets the status of files in the working directory
           // we can also use git status --short  for short status
           // files have 4 possible status values tracked, unmodified, modified, staged.
git diff   // to see what changes occured exactly (working tree vs staged)
git diff --staged //(staged vs last commit)
git add <>
git commit -m""
git log <*option>

# Removing file 
git rm <fname> // removes the file from working dir 
git rm --cached // remove file from staged area but its no longer tracked and its not removed from working tree.

# Git Basics - Viewing the Commit History
git log // shows all commits in chronological order in the repo.
git log --patch | -p  -n? // for change log per commit

# Git Basics - Undoing Things

git commit --amend // used when early commit and forgot some files
                   // modifieS THE LAST COMMIT and adds the staged file to it, as if it never happened
                   // so we have only one commit.

## Unstaging a Staged File
git restore --staged <file-name> // moves the file from staged state to untracked/unmodified state.

## Unmodifying a Modified File with git restore
git restore <file>..." // to discard changes in working directory
                       // revert it back to what it looked like when you last committed.

                          +------------+              +------------+
                          |            |   edit       |            |
+-------------+           + unmodified + . . . . . .> +  modified  +
|  untracked  |           |            |   restore    |            |
+-------------+           +------------+ <  . . . . . +------------+
|            ^                ^                       ^           |
.            .                .                       .           .
|            |                |                       |           |
.            .                . commit                .           .
|            |                |                       |           | 
.       restore --staged      .        restore --staged           . 
|            . . . . . . +--------+  . . . . . . . . .            |                  
.                        |        |                               .
|          add           + staged +               add             |
. . . . . . . . . . . .> |        | <  . . . . . . . . . . . . .  .
                         +--------+

# Working with remote

what is Remote?
is a copy of the project hosted on the server

git remote  -v?// lists all remote repositories
git remote add <shortname> <url> // adds a new remote

"git fetch updates your remote-tracking branches under refs/remotes/<remote>/.
This operation is safe to run at any time since it never changes any 
of your local branches under refs/heads.

git pull brings a local branch up-to-date with its remote version,
while also updating your other remote-tracking branches.

From the Git documentation for git pull:
git pull runs git fetch with the given parameters and then 
depending on configuration options or command line flags, 
will call either git rebase or git merge to reconcile diverging branches."

git fetch <remote>
git pull <remote> <branch>
git pull // if our current brach is a tracking branch.
git push <remote> <branch> // pushes our branch to the remote branch

// please note that by default not all branches on your local machine
// is related to remote branches you  may have your private branches.
// and you can take updates from any brach and push your changes to any
// remote branch.

// making a link between a local branch and a remote one means
// when we push we know what remote and what branch our local will
// push to, and when we pull we know what remote branch.
// such relation is made explicitly.

git remote show <remote> // displays all remote information
git remote rename <old-name> <new-name>
git remote remove <remote>

# Tagging
# Alias

------------------------------------------------------------------
Summary

Git is vcs.
basic Terminology 
 - Working Tree
 - Repository
 - staging
 - Commit
 - Branch

the four file status
git diff
how to commit
how to see commits git log
undo
    amend, restore to unstaged, restore to unmodified

ignoring changes using .gitignore

remotes
    add, remove, rename, fetch, pushh, pull, show
    how to track remote branches?

# next step branching
